problem -1

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

solution-01:
space complexity O(n) and space complexity O(n) solution using set

var containsDuplicate = function(nums) {
 const seen = new Set();

 for(let num of nums) {
    if(seen.has(num)) {
        return true;
    } else {
        seen.add(num)
    }
 }

 return false;
  
};

solution 02: time complexity O(n log n) and space complexity O(1)

const  duplicateNumber = (nums) => {
   const arr = nums.sort((a,b)=> a-b);
   for(let i=1; i< nums.length; i++) {
       if(arr[i] === arr[i-1]) return true
   }
   return false
};






problem 02:
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

solution 01: O(n) time and space O(1)

var missingNumber = function(nums) {
   targetSum = ((nums.length)*(nums.length+1))/2;
   actualSum = nums.reduce((acc, num)=> acc + num);
   return targetSum - actualSum;
};

solution 02: O(n) time and O(n)space
const missingNumber = (nums) => {
   const seen = new Set(nums);
   for(let i=0; i< nums.length; i++) {
       if(!seen.has(i)) return i;
   }
 
}



problem 03:

Find All Numbers Disappeared in an Array

solution: O(n) time and o(n) space
var findDisappearedNumbers = function(nums) {
    const set = new Set(nums);
    const arr =[];
    for(let i=1; i< nums.length+1; i++) {
        if(!set.has(i)) {
            arr.push(i);
        }
    
    }
    return arr;
};


